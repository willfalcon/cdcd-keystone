# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Query {
  siteData(id: ID!): SiteData
  sites(
    where: SiteWhereInput! = {}
    orderBy: [SiteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Site!]
  site(where: SiteWhereUniqueInput!): Site
  sitesCount(where: SiteWhereInput! = {}): Int
  people(
    where: PersonWhereInput! = {}
    orderBy: [PersonOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Person!]
  person(where: PersonWhereUniqueInput!): Person
  peopleCount(where: PersonWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type Mutation {
  createSiteCDCD(title: String!, url: String!, frontendUrl: String): Site!
  createSite(data: SiteCreateInput!): Site
  createSites(data: [SiteCreateInput!]!): [Site]
  updateSite(where: SiteWhereUniqueInput!, data: SiteUpdateInput!): Site
  updateSites(data: [SiteUpdateArgs!]!): [Site]
  deleteSite(where: SiteWhereUniqueInput!): Site
  deleteSites(where: [SiteWhereUniqueInput!]!): [Site]
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
}

type SiteData {
  latestPost: String
  latestUpdate: String
  error: String
  customTypes: [String]
  typeOptions: [String]
}

type Site {
  id: ID!
  title: String
  url: String
  frontendUrl: String
  flagTime: Int
  postTypes: JSON
  updatePostTypes: JSON
}

input SiteWhereUniqueInput {
  id: ID
}

input SiteWhereInput {
  AND: [SiteWhereInput!]
  OR: [SiteWhereInput!]
  NOT: [SiteWhereInput!]
  id: IDFilter
  title: StringFilter
  url: StringFilter
  frontendUrl: StringFilter
  flagTime: IntNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input SiteOrderByInput {
  id: OrderDirection
  title: OrderDirection
  url: OrderDirection
  frontendUrl: OrderDirection
  flagTime: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SiteUpdateInput {
  title: String
  url: String
  frontendUrl: String
  flagTime: Int
  postTypes: JSON
  updatePostTypes: JSON
}

input SiteUpdateArgs {
  where: SiteWhereUniqueInput!
  data: SiteUpdateInput!
}

input SiteCreateInput {
  title: String
  url: String
  frontendUrl: String
  flagTime: Int
  postTypes: JSON
  updatePostTypes: JSON
}

type Person {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input PersonWhereUniqueInput {
  id: ID
  email: String
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input PersonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input PersonUpdateInput {
  name: String
  email: String
  password: String
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  name: String
  email: String
  password: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
